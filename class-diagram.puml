@startuml Order Status Tracker - Class Diagram

' Style configurations
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
}

' Domain Layer
package "Domain Layer" {
    abstract class OrderEvent {
        - orderId: Long
        - timestamp: LocalDateTime
        + getOrderId(): Long
        + getTimestamp(): LocalDateTime
        + {abstract} getEventType(): String
    }

    class DomainOrder {
        - id: OrderId
        - customerInfo: CustomerInfo
        - items: Set<OrderItem>
        - timeline: OrderTimeline
        - estimation: OrderEstimation
        - events: List<OrderEvent>
        + addItem(item: OrderItem)
        + updateItemStatus(itemId: Long, newStatus: OrderStatus)
        + updateItemProductType(itemId: Long, transition: ProductTypeTransition)
        + isDelayed(): boolean
        + getCompletionPercentage(): double
        + getItemDelayStatus(): Map<Long, Boolean>
        + findItem(itemId: Long): Optional<OrderItem>
    }

    class OrderId {
        - value: Long
        + getValue(): Long
    }

    class CustomerInfo {
        - name: String
        - notes: String
        - priority: boolean
    }

    class OrderItem {
        - item: Item
        - quantity: int
        - productTypeName: String
        - status: OrderStatus
        + isGenericType(): boolean
        + canChangeProductType(): boolean
        + canChangeStatus(newStatus: OrderStatus): boolean
        + withStatus(newStatus: OrderStatus): OrderItem
        + withNewProductType(productTypeId: Long, newName: String, newStatus: OrderStatus): OrderItem
        + getCurrentStepId(): Long
        + getTotalSteps(): int
        + getCurrentStepIndex(): int
    }

    class OrderStatus {
        - steps: Long[]
        - currentStepIndex: int
        - statusUpdates: Map<Long, LocalDateTime>
        + canMoveToNextStep(): boolean
        + canMoveToPreviousStep(): boolean
        + moveToNextStep()
        + moveToPreviousStep()
        + getCurrentStepId(): Long
        + toProgress(): OrderProgress
    }

    class ProductTypeTransition {
        - itemId: Long
        - sourceProductTypeId: Long
        - targetProductTypeId: Long
        - targetProductType: ProductType
        + createNewOrderStatus(initialStepTime: LocalDateTime): OrderStatus
        + isValidTransition(): boolean
        + getTargetProductTypeName(): String
    }

    class OrderProgress {
        - currentStep: int
        - totalSteps: int
        - currentStepId: Long
        - stepHistory: Map<Long, LocalDateTime>
        + getPercentComplete(): double
        + getCurrentStepId(): Long
        + getStepHistory(): Map<Long, LocalDateTime>
    }

    class OrderTimeline {
        - orderCreated: LocalDateTime
        - itemStatusTimestamps: Map<Long, Map<Long, LocalDateTime>>
        - isPriority: boolean
        + recordItemStatus(itemId: Long, statusId: Long, timestamp: LocalDateTime)
        + getItemDuration(itemId: Long): Duration
        + getTotalDuration(): Duration
        + getLatestUpdate(): LocalDateTime
        + hasStatus(itemId: Long, statusId: Long): boolean
        + getStatusTimestamp(itemId: Long, statusId: Long): Optional<LocalDateTime>
        + getItemStatusesSorted(itemId: Long): List<Map.Entry<Long, LocalDateTime>>
    }

    class OrderEstimation {
        - itemQuantities: Map<Long, Integer>
        - itemProcessingTimes: Map<Long, Integer>
        - isPriority: boolean
        + calculateTotalEstimatedTime(): int
        + calculateEstimatedCompletion(startTime: LocalDateTime): LocalDateTime
        + getItemEstimations(): Map<Long, Duration>
        + getEstimatedDuration(): Duration
        + isDelayed(timeline: OrderTimeline): boolean
        + getCompletionPercentage(timeline: OrderTimeline): double
        + getItemDelayStatus(timeline: OrderTimeline): Map<Long, Boolean>
    }

    class OrderCreatedEvent
    class ItemAddedEvent
    class ItemStatusChangedEvent {
        + isProgressionEvent(): boolean
        + isRegressionEvent(): boolean
    }
    class ProductTypeChangedEvent {
        + isInitialAssignment(): boolean
    }

    interface OrderCommand {
        + execute(order: DomainOrder): void
    }

    class CreateOrderCommand
    class UpdateItemStatusCommand
    class UpdateProductTypeCommand
    class CreateItemCommand
    class CreateProductTypeCommand
    class ProcessWebhookCommand
    class SetupOrderDetailsCommand
    class CreateStatusDefinitionCommand

    interface OrderSpecification {
        + isSatisfiedBy(order: DomainOrder): boolean
        + and(other: OrderSpecification): OrderSpecification
        + or(other: OrderSpecification): OrderSpecification
        + not(): OrderSpecification
    }

    class OrderInvariantsSpecification
    class HasItemSpecification
    class CanChangeProductTypeSpecification
}

' DTO Layer
package "DTO Layer" {
    class OrderDTO {
        - customerName: String
        - notes: String
        - priority: boolean
        - items: List<ItemDTO>
    }

    class ItemDTO {
        - id: Long
        - name: String
        - image: String
        - productTypeId: Long
    }

    class OrderDetailsWithStatusDTO {
        - orderId: Long
        - item: ItemDTO
        - itemAmount: Integer
        - productType: String
        - currentStep: Integer
        - totalSteps: Integer
        - statusHistory: Map<Long, LocalDateTime>
    }

    class OrderDashboardDTO {
        - id: Long
        - customerName: String
        - priority: boolean
        - orderCreated: LocalDateTime
        - completionPercentage: double
        - isDelayed: boolean
    }

    class ProductTypeDTO {
        - name: String
        - steps: Long[]
    }

    class StatusDefinitionDTO {
        - name: String
        - description: String
        - image: String
    }

    class UpdateProductTypeDTO {
        - itemId: Long
        - targetProductTypeId: Long
    }
}

' Mapper Layer
package "Mapper Layer" {
    class OrderMapper {
        + toDTO(order: ModelOrder): OrderDTO
        + toDashboardDTO(order: ModelOrder): OrderDashboardDTO
        + toDetailsDTO(orderDetails: OrderDetails): OrderDetailsWithStatusDTO
        + fromDTO(dto: OrderDTO): ModelOrder
    }

    class OrderDetailsMapper {
        + toDTO(orderDetails: OrderDetails): OrderDetailsWithStatusDTO
        + fromDTO(dto: OrderDetailsWithStatusDTO): OrderDetails
    }

    class WebhookMapper {
        + toOrder(payload: WebhookPayload): DomainOrder
        + toOrderDetails(payload: WebhookPayload): OrderDetails
    }
}

' Model Layer
package "Model Layer" {
    class Item {
        - id: Long
        - name: String
        - image: String
        - productTypeId: Long
    }

    class ProductType {
        - id: Long
        - name: String
        - differentSteps: Long[]
    }

    class StatusDefinition {
        - id: Long
        - name: String
        - description: String
        - image: String
    }

    class OrderDetails {
        - id: Long
        - orderId: Long
        - item: Item
        - itemAmount: Integer
        - product_type: String
        - currentStepIndex: Integer
        - differentSteps: Long[]
        - updated: Map<Long, LocalDateTime>
    }

    class ModelOrder {
        - id: Long
        - customerName: String
        - notes: String
        - priority: boolean
        - orderCreated: LocalDateTime
        - shippingUrl: String
        - totalEstimatedTime: int
    }
}

' Repository Layer
package "Repository Layer" {
    interface JpaRepository<T, ID>

    interface OrderRepository {
        + findByCustomerNameContainingIgnoreCase(customerName: String): List<ModelOrder>
        + findByPriorityTrue(): List<ModelOrder>
        + findAllByOrderByOrderCreatedAsc(): List<ModelOrder>
    }

    interface ItemRepository {
        + findByProductTypeId(productTypeId: Long): List<Item>
        + findByNameContainingIgnoreCase(name: String): List<Item>
    }

    interface ProductTypeRepository {
        + findByNameContainingIgnoreCase(name: String): List<ProductType>
    }

    interface StatusDefinitionRepository {
        + findByNameContainingIgnoreCase(name: String): List<StatusDefinition>
    }

    interface OrderProductTypeRepository {
        + findByOrderId(orderId: Long): List<OrderDetails>
        + findByCurrentStepIndex(currentStepIndex: Integer): List<OrderDetails>
        + findByItemId(itemId: Long): List<OrderDetails>
    }
}

' Service Layer
package "Service Layer" {
    class OrderService {
        - orderRepository: OrderRepository
        - orderProductTypeRepository: OrderProductTypeRepository
        - itemService: ItemService
        - statusDefinitionRepository: StatusDefinitionRepository
        - productTypeRepository: ProductTypeRepository
        + createOrder(orderDTO: OrderDTO): ModelOrder
        + getOrderDetails(orderId: Long): List<OrderDetailsWithStatusDTO>
        + getAllOrders(): List<OrderDashboardDTO>
        + createStatusDefinition(dto: StatusDefinitionDTO): StatusDefinition
    }

    class WebhookService {
        - orderService: OrderService
        - itemService: ItemService
        - productTypeService: ProductTypeService
        + createOrderInDatabase(payload: WebhookPayload): void
    }

    class ItemService {
        - itemRepository: ItemRepository
        - productTypeRepository: ProductTypeRepository
        + createItem(itemDTO: ItemDTO): Item
        + findById(itemId: Long): Item
    }

    class ProductTypeService {
        - productTypeRepository: ProductTypeRepository
        - statusDefinitionRepository: StatusDefinitionRepository
        + createProductType(productTypeDTO: ProductTypeDTO): ProductType
        + updateItemProductType(itemId: Long, targetProductTypeId: Long): void
        + findById(productTypeId: Long): ProductType
    }

    class OrderProgressService {
        + getProgress(orderDetailsId: Long): OrderProgress
        + moveToNextStep(orderDetailsId: Long): OrderProgress
        + moveToPreviousStep(orderDetailsId: Long): OrderProgress
    }
}

' Controller Layer
package "Controller Layer" {
    class OrderController {
        - orderService: OrderService
        - itemService: ItemService
        - productTypeService: ProductTypeService
        - orderProgressService: OrderProgressService
        + createOrder(orderDTO: OrderDTO): ResponseEntity
        + getOrderDetails(orderId: Long): ResponseEntity
        + createItem(itemDTO: ItemDTO): ResponseEntity
        + createProductType(productTypeDTO: ProductTypeDTO): ResponseEntity
        + createStatusDefinition(dto: StatusDefinitionDTO): ResponseEntity
        + updateItemProductType(dto: UpdateProductTypeDTO): ResponseEntity
        + moveToNextStep(id: Long): ResponseEntity
        + moveToPrevStep(id: Long): ResponseEntity
        + getAllOrders(): ResponseEntity
        + getProgress(id: Long): ResponseEntity
    }

    class WebhookController {
        - webhookService: WebhookService
        + handleWebhook(payload: WebhookPayload): ResponseEntity
    }
}

' Relationships

' Core Domain Relationships
DomainOrder *-- "1" OrderId
DomainOrder *-- "1" CustomerInfo
DomainOrder *-- "*" OrderItem
DomainOrder *-- "1" OrderTimeline
DomainOrder *-- "1" OrderEstimation
DomainOrder o-- "*" OrderEvent

OrderItem o-- "1" Item
OrderItem *-- "1" OrderStatus
OrderStatus ..> OrderProgress : creates
OrderStatus ..> "1..*" StatusDefinition : references by ID

ProductTypeTransition o-- "1" ProductType
ProductTypeTransition ..> OrderStatus : creates

' Event Hierarchy
OrderEvent <|-- OrderCreatedEvent
OrderEvent <|-- ItemAddedEvent
OrderEvent <|-- ItemStatusChangedEvent
OrderEvent <|-- ProductTypeChangedEvent

' Command Hierarchy
OrderCommand <|.. CreateOrderCommand
OrderCommand <|.. UpdateItemStatusCommand
OrderCommand <|.. UpdateProductTypeCommand
OrderCommand <|.. CreateItemCommand
OrderCommand <|.. CreateProductTypeCommand
OrderCommand <|.. ProcessWebhookCommand
OrderCommand <|.. SetupOrderDetailsCommand

' Specification Hierarchy
OrderSpecification <|.. OrderInvariantsSpecification
OrderSpecification <|.. HasItemSpecification
OrderSpecification <|.. CanChangeProductTypeSpecification

' Model Relationships
Item --> "0..1" ProductType : has type
ProductType ..> "*" StatusDefinition : references by ID in differentSteps
OrderDetails --> "1" Item : has
OrderDetails --> "1" ModelOrder : belongs to

' Repository Inheritance
JpaRepository <|.. OrderRepository
JpaRepository <|.. ItemRepository
JpaRepository <|.. ProductTypeRepository
JpaRepository <|.. StatusDefinitionRepository
JpaRepository <|.. OrderProductTypeRepository

' Repository to Model Relationships
OrderRepository ..> ModelOrder : manages
ItemRepository ..> Item : manages
ProductTypeRepository ..> ProductType : manages
StatusDefinitionRepository ..> StatusDefinition : manages
OrderProductTypeRepository ..> OrderDetails : manages

' Service Dependencies
OrderService ..> OrderRepository : uses
OrderService ..> ModelOrder : manages
WebhookService ..> DomainOrder : creates
ItemService ..> ItemRepository : uses
ItemService ..> Item : manages
ProductTypeService ..> ProductTypeRepository : uses
ProductTypeService ..> ProductType : manages
OrderProgressService ..> OrderProgress : manages
OrderProgressService ..> OrderDetails : uses

' Controller Dependencies
OrderController ..> OrderService : uses
OrderController ..> ItemService : uses
OrderController ..> ProductTypeService : uses
OrderController ..> OrderProgressService : uses
WebhookController ..> WebhookService : uses

' DTO and Mapper Dependencies
OrderService ..> OrderDTO : uses
OrderService ..> OrderDetailsWithStatusDTO : uses
OrderService ..> OrderDashboardDTO : uses
OrderService ..> OrderMapper : uses
OrderService ..> OrderDetailsMapper : uses

WebhookService ..> WebhookMapper : uses

OrderMapper ..> ModelOrder : transforms
OrderMapper ..> OrderDTO : transforms
OrderMapper ..> OrderDashboardDTO : transforms
OrderMapper ..> OrderDetailsWithStatusDTO : transforms

OrderDetailsMapper ..> OrderDetails : transforms
OrderDetailsMapper ..> OrderDetailsWithStatusDTO : transforms

WebhookMapper ..> DomainOrder : transforms
WebhookMapper ..> OrderDetails : transforms

@enduml
